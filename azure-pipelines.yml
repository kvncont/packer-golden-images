trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - .gitignore
    - README.md
pr:
  branches:
    include:
    - main
  paths:
    exclude:
    - .gitignore
    - README.md

schedules:
- cron: "0 0 * * 1" # cron syntax defining a schedule
  displayName: Weekly build # friendly name given to a specific schedule
  branches:
    include: main # which branches the schedule applies to
  always: true # whether to always run the pipeline or only if there have been source code changes since the last successful scheduled run. The default is false.

pool:
  vmImage: ubuntu-latest

variables:
  - group: group-pkr-secrets
  - name: image-id
    value: $[replace(variables['Build.BuildNumber'], '.', '-')]
  - name: image-name
    value: azdo-agent-pool-$(image-id)
  - name: working-directory
    value: $(System.DefaultWorkingDirectory)/ubuntu/azdo-agent-pools/

stages:
- stage: Build
  displayName: Build Image
  jobs:
  - job: Build_Image
    displayName: Build image
    steps:
    - task: Bash@3
      displayName: Packer format
      inputs:
        targetType: 'inline'
        script: |
          packer fmt -check .
        workingDirectory: '$(working-directory)'

    - task: Bash@3
      displayName: Packer validate
      env:
        PKR_VAR_client_id: $(pkr-client-id)
        PKR_VAR_client_secret: $(pkr-client-secret)
        PKR_VAR_subscription_id: $(az-subscription-id)
        PKR_VAR_tenant_id: $(az-tenant-id)
      inputs:
        targetType: 'inline'
        script: |
          packer validate \
          -var="image_name=$(image-name)" .
        workingDirectory: '$(working-directory)'

    - task: Bash@3
      displayName: Packer inspect
      env:
        PKR_VAR_client_id: $(pkr-client-id)
        PKR_VAR_client_secret: $(pkr-client-secret)
        PKR_VAR_subscription_id: $(az-subscription-id)
        PKR_VAR_tenant_id: $(az-tenant-id)
      inputs:
        targetType: 'inline'
        script: |
          packer inspect \
          -var="image_name=$(image-name)" .
        workingDirectory: '$(working-directory)'

    - task: Bash@3
      displayName: Packer build
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      env:
        PKR_VAR_client_id: $(pkr-client-id)
        PKR_VAR_client_secret: $(pkr-client-secret)
        PKR_VAR_subscription_id: $(az-subscription-id)
        PKR_VAR_tenant_id: $(az-tenant-id)
      inputs:
        targetType: 'inline'
        script: |
          packer build \
          -var="image_name=$(image-name)" .
        workingDirectory: '$(working-directory)'

    - task: PublishPipelineArtifact@1
      displayName: Publish packer artifact
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        targetPath: '$(working-directory)/packer-manifest.json'
        artifact: 'Packer manifest'
        publishLocation: 'pipeline'